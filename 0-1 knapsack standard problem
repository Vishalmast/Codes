# 0-1 knapsack problem
# Example input:
# 60 100 120
# 10 20 30
# 50

# Output: 220


val = list(map(int, input().split()))
wt = list(map(int, input().split()))
w = int(input())

# Dynamic Programming
dp = [[0 for j in range(w+1) ] for i in range(len(val) + 1)]

for i in range(1, len(val) + 1):
    for j in range(1, w+1):
        dp[i][j] = dp[i-1][j]
        
        if j >= wt[i-1]:
            dp[i][j] = max(val[i-1] + dp[i-1][j- wt[i-1]], dp[i][j])
for i in dp:
    print(i)
print(dp[-1][-1])   
    
#Recursive
def knap(val, wt, w, n): 
    if n == -1 or w == 0:
        return 0
    
    return max(val[n] + knap(val, wt, w- wt[n], n-1), knap(val, wt, w, n-1))

print(knap(val, wt, w, len(val)-1))
